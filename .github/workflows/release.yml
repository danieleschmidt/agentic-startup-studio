name: Automated Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Quality Gate Before Release
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      should-release: ${{ steps.check-commits.outputs.should-release }}
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for releasable commits
        id: check-commits
        run: |
          # Check if there are any commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "No previous release found, will create initial release"
          else
            COMMITS_SINCE_RELEASE=$(git rev-list ${LAST_TAG}..HEAD --count)
            if [ "$COMMITS_SINCE_RELEASE" -gt 0 ]; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "Found $COMMITS_SINCE_RELEASE commits since last release"
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
              echo "No new commits since last release"
            fi
          fi

      - name: Setup Python
        if: steps.check-commits.outputs.should-release == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        if: steps.check-commits.outputs.should-release == 'true'
        run: |
          pip install uv
          uv pip install --system -r requirements.txt
          uv pip install --system -e ".[dev,test]"

      - name: Run comprehensive tests
        if: steps.check-commits.outputs.should-release == 'true'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          # Run all tests with strict requirements
          pytest --cov=pipeline --cov=core \
            --cov-fail-under=90 \
            --maxfail=1 \
            -v

      - name: Run security scan
        if: steps.check-commits.outputs.should-release == 'true'
        run: |
          bandit -r pipeline/ core/ scripts/ --severity-level medium
          safety check

      - name: Validate build
        if: steps.check-commits.outputs.should-release == 'true'
        run: |
          python -m build
          twine check dist/*

  # Semantic Release
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: pre-release-validation
    if: needs.pre-release-validation.outputs.should-release == 'true'
    timeout-minutes: 15
    outputs:
      new-release-published: ${{ steps.semantic-release.outputs.new_release_published }}
      new-release-version: ${{ steps.semantic-release.outputs.new_release_version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install semantic-release
        run: |
          npm install -g semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/exec \
            conventional-changelog-conventionalcommits

      - name: Install Python dependencies
        run: |
          pip install uv build twine
          uv pip install --system -r requirements.txt

      - name: Run semantic release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx semantic-release

      - name: Build Python package
        if: steps.semantic-release.outputs.new_release_published == 'true'
        run: |
          python -m build

      - name: Upload build artifacts
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ steps.semantic-release.outputs.new_release_version }}
          path: dist/*

  # Container Build and Push
  container-release:
    name: Container Release
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release-published == 'true'
    timeout-minutes: 20
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=${{ needs.semantic-release.outputs.new-release-version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.semantic-release.outputs.new-release-version }}
            type=semver,pattern={{major}},value=${{ needs.semantic-release.outputs.new-release-version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push container
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.semantic-release.outputs.new-release-version }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [semantic-release, container-release]
    if: needs.semantic-release.outputs.new-release-published == 'true'
    environment: staging
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment validator
        run: |
          pip install aiohttp asyncpg redis prometheus-client

      - name: Deploy to staging
        env:
          VERSION: ${{ needs.semantic-release.outputs.new-release-version }}
          CONTAINER_IMAGE: ghcr.io/${{ github.repository }}:${{ needs.semantic-release.outputs.new-release-version }}
        run: |
          echo "üöÄ Deploying version $VERSION to staging..."
          echo "Container image: $CONTAINER_IMAGE"
          
          # Add your staging deployment commands here
          # For example:
          # kubectl set image deployment/agentic-startup-studio app=$CONTAINER_IMAGE -n staging
          # kubectl rollout status deployment/agentic-startup-studio -n staging --timeout=300s
          
          echo "‚úÖ Staging deployment initiated"

      - name: Validate staging deployment
        env:
          BASE_URL: https://staging.terragonlabs.com
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
        run: |
          python scripts/validate_deployment.py
          
      - name: Run staging smoke tests
        run: |
          echo "üß™ Running staging smoke tests..."
          # Add staging-specific smoke tests
          echo "‚úÖ Staging smoke tests passed"

  # Production Deployment (Manual Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [semantic-release, container-release, deploy-staging]
    if: needs.semantic-release.outputs.new-release-published == 'true'
    environment: production
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment validator
        run: |
          pip install aiohttp asyncpg redis prometheus-client

      - name: Pre-deployment validation
        env:
          BASE_URL: https://api.terragonlabs.com
        run: |
          echo "üîç Running pre-deployment validation..."
          # Add pre-deployment checks
          echo "‚úÖ Pre-deployment validation passed"

      - name: Deploy to production
        env:
          VERSION: ${{ needs.semantic-release.outputs.new-release-version }}
          CONTAINER_IMAGE: ghcr.io/${{ github.repository }}:${{ needs.semantic-release.outputs.new-release-version }}
        run: |
          echo "üöÄ Deploying version $VERSION to production..."
          echo "Container image: $CONTAINER_IMAGE"
          
          # Add your production deployment commands here
          # For example:
          # kubectl set image deployment/agentic-startup-studio app=$CONTAINER_IMAGE -n production
          # kubectl rollout status deployment/agentic-startup-studio -n production --timeout=600s
          
          echo "‚úÖ Production deployment completed"

      - name: Validate production deployment
        env:
          BASE_URL: https://api.terragonlabs.com
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
        run: |
          python scripts/validate_deployment.py

      - name: Run production smoke tests
        run: |
          echo "üß™ Running production smoke tests..."
          # Add production-specific smoke tests
          echo "‚úÖ Production smoke tests passed"

      - name: Update monitoring dashboards
        run: |
          echo "üìä Updating monitoring dashboards with new version..."
          # Add commands to update monitoring dashboards
          echo "‚úÖ Monitoring dashboards updated"

  # Post-Release Actions
  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [semantic-release, deploy-production]
    if: needs.semantic-release.outputs.new-release-published == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create deployment summary
        env:
          VERSION: ${{ needs.semantic-release.outputs.new-release-version }}
        run: |
          echo "# Release $VERSION Deployment Summary" > deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Release Information" >> deployment-summary.md
          echo "- **Version**: $VERSION" >> deployment-summary.md
          echo "- **Release Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> deployment-summary.md
          echo "- **Git Commit**: ${{ github.sha }}" >> deployment-summary.md
          echo "- **Released By**: ${{ github.actor }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Deployment Status" >> deployment-summary.md
          echo "- ‚úÖ Staging deployment successful" >> deployment-summary.md
          echo "- ‚úÖ Production deployment successful" >> deployment-summary.md
          echo "- ‚úÖ Post-deployment validation passed" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Next Steps" >> deployment-summary.md
          echo "- Monitor application metrics and logs" >> deployment-summary.md
          echo "- Verify all features are working correctly" >> deployment-summary.md
          echo "- Update documentation if needed" >> deployment-summary.md

      - name: Notify team
        run: |
          echo "üì¢ Notifying team about release $VERSION..."
          # Add team notification logic (Slack, email, etc.)
          echo "‚úÖ Team notification sent"

      - name: Archive release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-summary-${{ needs.semantic-release.outputs.new-release-version }}
          path: deployment-summary.md