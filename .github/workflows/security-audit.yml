name: Security Audit

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/security-audit.yml'
  pull_request:
    branches: [main]
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
  workflow_dispatch:

jobs:
  vulnerability-scan:
    name: Vulnerability Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install uv safety bandit semgrep
          uv pip install --system -r requirements.txt

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check --short-report

      - name: Run Bandit security scan
        run: |
          bandit -r pipeline/ core/ scripts/ \
            -f json -o bandit-report.json \
            --severity-level medium || true
          bandit -r pipeline/ core/ scripts/ --severity-level high

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto --severity=ERROR .

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline || true
          detect-secrets audit .secrets.baseline

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install license checker
        run: pip install licensecheck pip-licenses

      - name: Check license compliance
        run: |
          echo "=== License Summary ==="
          pip-licenses --format=table --order=license
          
          echo "=== License Validation ==="
          pip-licenses --fail-on="GPL v3;AGPL v3;SSPL"
          
          echo "=== Detailed License Report ==="
          pip-licenses --format=json --output-file=licenses-report.json

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses-report.json

  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install uv cyclonedx-bom
          uv pip install --system -r requirements.txt

      - name: Generate SBOM
        run: |
          cyclonedx-py --output-format json --output-file sbom.json .
          cyclonedx-py --output-format xml --output-file sbom.xml .

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.run_number }}
          path: |
            sbom.json
            sbom.xml

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, secrets-scan, license-compliance, sbom-generation]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Audit Summary - $(date)" > security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "- Vulnerability Scan: ${{ needs.vulnerability-scan.result }}" >> security-summary.md
          echo "- Secrets Detection: ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "- License Compliance: ${{ needs.license-compliance.result }}" >> security-summary.md
          echo "- SBOM Generation: ${{ needs.sbom-generation.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          if [[ -f "security-reports-${{ github.run_number }}/safety-report.json" ]]; then
            echo "## Vulnerability Summary" >> security-summary.md
            python3 -c "
import json
with open('security-reports-${{ github.run_number }}/safety-report.json', 'r') as f:
    data = json.load(f)
    if 'vulnerabilities' in data:
        print(f'Found {len(data[\"vulnerabilities\"])} vulnerabilities')
    else:
        print('No vulnerabilities found')
" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "Audit completed at: $(date)" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Check overall security status
        run: |
          if [[ "${{ needs.vulnerability-scan.result }}" == "success" && 
                "${{ needs.secrets-scan.result }}" == "success" && 
                "${{ needs.license-compliance.result }}" == "success" ]]; then
            echo "✅ Security audit passed"
            exit 0
          else
            echo "❌ Security audit failed"
            exit 1
          fi