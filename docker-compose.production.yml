# Production Docker Compose configuration with advanced optimizations
# Includes: Security hardening, performance tuning, monitoring, and scaling

version: '3.8'

x-common-variables: &common-variables
  ENVIRONMENT: production
  LOG_LEVEL: INFO
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONHASHSEED: random
  # Performance optimization
  MALLOC_ARENA_MAX: "2"
  # AI/ML optimization
  OMP_NUM_THREADS: "1"
  OPENBLAS_NUM_THREADS: "1"

x-common-logging: &common-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "5"
    labels: "service,version,environment"

x-common-restart: &common-restart
  restart: unless-stopped

x-common-healthcheck: &common-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

x-common-resources: &common-resources
  limits:
    memory: 2G
    cpus: '1.0'
  reservations:
    memory: 512M
    cpus: '0.25'

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/agentic-startup-studio
  app-cache:
    driver: local
  model-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # Main API service with load balancing
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${GIT_COMMIT:-unknown}
        VERSION: ${VERSION:-latest}
      cache_from:
        - terragon/agentic-startup-studio:cache
    image: terragon/agentic-startup-studio:${VERSION:-latest}
    container_name: agentic-api-primary
    hostname: api-primary
    <<: *common-restart
    environment:
      <<: *common-variables
      INSTANCE_ID: api-primary
      WORKERS: 4
      MAX_REQUESTS: 1000
      MAX_REQUESTS_JITTER: 100
    ports:
      - "8080:8000"
      - "9102:9102"
    volumes:
      - app-logs:/app/logs
      - app-cache:/app/cache
      - model-cache:/app/models:ro
    networks:
      - app-network
      - monitoring-network
    logging: *common-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      <<: *common-healthcheck
    deploy:
      resources: *common-resources

  # AI Agent Workers (scaled horizontally)
  ai-worker-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    image: terragon/agentic-startup-studio:${VERSION:-latest}
    container_name: agentic-worker-1
    hostname: worker-1
    <<: *common-restart
    environment:
      <<: *common-variables
      INSTANCE_ID: worker-1
      WORKER_TYPE: ai-agent
      CONCURRENCY: 2
    volumes:
      - app-logs:/app/logs
      - app-cache:/app/cache
      - model-cache:/app/models
    networks:
      - app-network
    logging: *common-logging
    healthcheck:
      test: ["CMD", "python", "-c", "import psutil; exit(0 if any('worker' in p.name() for p in psutil.process_iter()) else 1)"]
      <<: *common-healthcheck
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  ai-worker-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    image: terragon/agentic-startup-studio:${VERSION:-latest}
    container_name: agentic-worker-2
    hostname: worker-2
    <<: *common-restart
    environment:
      <<: *common-variables
      INSTANCE_ID: worker-2
      WORKER_TYPE: ai-agent
      CONCURRENCY: 2
    volumes:
      - app-logs:/app/logs
      - app-cache:/app/cache
      - model-cache:/app/models
    networks:
      - app-network
    logging: *common-logging
    healthcheck:
      test: ["CMD", "python", "-c", "import psutil; exit(0 if any('worker' in p.name() for p in psutil.process_iter()) else 1)"]
      <<: *common-healthcheck
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Model serving service (for AI model inference)
  model-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: model-serving
    image: terragon/agentic-startup-studio-models:${VERSION:-latest}
    container_name: agentic-model-server
    hostname: model-server
    <<: *common-restart
    environment:
      <<: *common-variables
      INSTANCE_ID: model-server
      MODEL_CACHE_SIZE: 1000
      INFERENCE_BATCH_SIZE: 8
      MODEL_WARMUP_ENABLED: "true"
    ports:
      - "8081:8000"
    volumes:
      - model-cache:/app/models/cache
      - app-logs:/app/logs
    networks:
      - app-network
      - monitoring-network
    logging: *common-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      <<: *common-healthcheck
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # PostgreSQL with optimizations for AI/ML workloads
  postgresql:
    image: postgres:15-alpine
    container_name: agentic-postgresql
    hostname: postgresql
    <<: *common-restart
    environment:
      POSTGRES_DB: startup_studio
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--data-checksums --encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/bootstrap.sql:/docker-entrypoint-initdb.d/01-bootstrap.sql
    networks:
      - app-network
    logging: *common-logging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d startup_studio"]
      <<: *common-healthcheck
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql.log

  # Redis with persistence and clustering
  redis:
    image: redis:7-alpine
    container_name: agentic-redis
    hostname: redis
    <<: *common-restart
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./monitoring/redis.conf:/etc/redis/redis.conf
    networks:
      - app-network
    logging: *common-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *common-healthcheck
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.1'
    command: redis-server /etc/redis/redis.conf

  # Nginx reverse proxy with load balancing
  nginx:
    image: nginx:alpine
    container_name: agentic-nginx
    hostname: nginx
    <<: *common-restart
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app-logs:/var/log/nginx
    networks:
      - app-network
    logging: *common-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      <<: *common-healthcheck
    depends_on:
      - api
      - model-server
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-prometheus
    hostname: prometheus
    <<: *common-restart
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts-enhanced.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    networks:
      - monitoring-network
    logging: *common-logging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      <<: *common-healthcheck
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=20GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-grafana
    hostname: grafana
    <<: *common-restart
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: "http://localhost:3001"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring-network
    logging: *common-logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      <<: *common-healthcheck
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: agentic-jaeger
    hostname: jaeger
    <<: *common-restart
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    networks:
      - monitoring-network
    logging: *common-logging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      <<: *common-healthcheck
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: agentic-loki
    hostname: loki
    <<: *common-restart
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - monitoring-network
    logging: *common-logging
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: agentic-promtail
    hostname: promtail
    <<: *common-restart
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - app-logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
    networks:
      - monitoring-network
    logging: *common-logging
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.05'

volumes:
  postgresql-data:
    driver: local
  redis-data:
    driver: local
  loki-data:
    driver: local