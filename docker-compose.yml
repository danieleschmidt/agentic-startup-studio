version: '3.9'

# ==============================================================================
# NETWORKS - Isolated network segments for security
# ==============================================================================
networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge
    internal: true  # Database network is internal-only
  monitoring-network:
    driver: bridge

services:
  # ===================================================================
  # ENHANCED CORE DATASTORES WITH SECURITY & PERFORMANCE
  # ===================================================================
  
  redis:
    image: redis:7-alpine
    container_name: agentic-redis
    restart: unless-stopped
    env_file: .env
    networks:
      - db-network
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
    command: >
      redis-server 
      --requirepass $${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512m
        reservations:
          cpus: '0.25'
          memory: 256m

  pgvector:
    image: pgvector/pgvector:pg16
    container_name: agentic-postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - db-network
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./pipeline/storage/migrations:/docker-entrypoint-initdb.d:ro
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c log_statement=all
      -c log_duration=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1g
        reservations:
          cpus: '0.5'
          memory: 512m

  # ===================================================================
  # AGENTIC STARTUP STUDIO APPLICATION SERVICES
  # ===================================================================

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
        VERSION: ${VERSION:-2.0.0}
    container_name: agentic-api
    restart: unless-stopped
    env_file: .env
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgvector:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - TRACING_ENABLED=true
    networks:
      - app-network
      - db-network
      - monitoring-network
    ports:
      - "8001:8000"  # Main API on different port to avoid conflict
      - "127.0.0.1:9102:9102"  # Metrics endpoint
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads:rw
    depends_on:
      pgvector:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/admin/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2g
        reservations:
          cpus: '1.0'
          memory: 1g

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: agentic-worker
    restart: unless-stopped
    env_file: .env
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgvector:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - WORKER_CONCURRENCY=4
      - LOG_LEVEL=INFO
    networks:
      - app-network
      - db-network
    volumes:
      - ./logs:/app/logs
    depends_on:
      pgvector:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1g
        reservations:
          cpus: '0.5'
          memory: 512m

  # ===================================================================
  # ANALYTICS & ENGAGEMENT SERVICES (ENHANCED)
  # ===================================================================
  
  posthog-clickhouse:
    image: clickhouse/clickhouse-server:23
    container_name: agentic-clickhouse
    restart: unless-stopped
    env_file: .env
    networks:
      - db-network
      - monitoring-network
    volumes:
      - chdata:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1g
        reservations:
          cpus: '0.5'
          memory: 512m

  posthog:
    image: posthog/posthog:latest
    container_name: agentic-posthog
    restart: unless-stopped
    env_file: .env
    networks:
      - app-network
      - db-network
      - monitoring-network
    depends_on:
      pgvector:
        condition: service_healthy
      redis:
        condition: service_healthy
      posthog-clickhouse:
        condition: service_healthy
    ports:
      - "127.0.0.1:8000:8000"  # Analytics dashboard
    environment:
      DATABASE_URL: ${POSTHOG_DATABASE_URL}
      SECRET_KEY: ${POSTHOG_SECRET_KEY}
      CLICKHOUSE_HOST: posthog-clickhouse
      REDIS_HOST: redis
      SITE_URL: http://localhost:8000
    volumes:
      - posthog_data:/var/lib/posthog
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/_health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1g
        reservations:
          cpus: '0.5'
          memory: 512m

  dittofeed:
    image: ghcr.io/dittofeed/dittofeed:latest
    container_name: agentic-dittofeed
    restart: unless-stopped
    env_file: .env
    networks:
      - app-network
      - db-network
    depends_on:
      pgvector:
        condition: service_healthy
      redis:
        condition: service_healthy
      posthog:
        condition: service_healthy
    ports:
      - "127.0.0.1:9000:8080"
    environment:
      DATABASE_URL: ${DITTO_DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      POSTHOG_API_KEY: "${POSTHOG_API_KEY}"
      POSTHOG_PROJECT_ID: "${POSTHOG_PROJECT_ID}"
    volumes:
      - dittofeed_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512m
        reservations:
          cpus: '0.25'
          memory: 256m

  # ===================================================================
  # ENHANCED OBSERVABILITY & MONITORING STACK
  # ===================================================================
  
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: agentic-prometheus
    restart: unless-stopped
    networks:
      - monitoring-network
      - app-network
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9090'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1g
        reservations:
          cpus: '0.5'
          memory: 512m

  grafana:
    image: grafana/grafana:10.1.0
    container_name: agentic-grafana
    restart: unless-stopped
    networks:
      - monitoring-network
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512m
        reservations:
          cpus: '0.25'
          memory: 256m

  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: agentic-alertmanager
    restart: unless-stopped
    networks:
      - monitoring-network
    ports:
      - "127.0.0.1:9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address='
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256m
        reservations:
          cpus: '0.1'
          memory: 128m

  # ===================================================================
  # DISTRIBUTED TRACING
  # ===================================================================

  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: agentic-jaeger
    restart: unless-stopped
    networks:
      - monitoring-network
    ports:
      - "127.0.0.1:16686:16686"  # Jaeger UI
      - "127.0.0.1:14268:14268"  # Jaeger collector
      - "127.0.0.1:4317:4317"    # OTLP gRPC
      - "127.0.0.1:4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=50000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512m
        reservations:
          cpus: '0.25'
          memory: 256m

  # ===================================================================
  # REVERSE PROXY & LOAD BALANCER
  # ===================================================================

  nginx:
    image: nginx:1.25-alpine
    container_name: agentic-nginx
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs:/var/log/nginx
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256m
        reservations:
          cpus: '0.25'
          memory: 128m

volumes:
  redis_data:
  pgdata:
  chdata:
  posthog_data:
  dittofeed_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
