name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependency update'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - security-only

jobs:
  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      security-updates: ${{ steps.check.outputs.security-updates }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety pip-audit
        
    - name: Check for outdated packages
      id: check
      run: |
        # Check for outdated packages
        pip list --outdated --format=json > outdated.json
        
        # Check for security vulnerabilities
        safety check --json --output safety.json || true
        pip-audit --format=json --output audit.json || true
        
        # Determine if we have updates
        OUTDATED_COUNT=$(jq length outdated.json)
        SECURITY_COUNT=$(jq length safety.json)
        
        echo "has-updates=$([ $OUTDATED_COUNT -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        echo "security-updates=$([ $SECURITY_COUNT -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        
        echo "Found $OUTDATED_COUNT outdated packages"
        echo "Found $SECURITY_COUNT security vulnerabilities"
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          outdated.json
          safety.json
          audit.json

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: check-dependencies
    if: needs.check-dependencies.outputs.has-updates == 'true'
    
    strategy:
      matrix:
        update-type: [security, patch, minor]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety pip-audit pur
        
    - name: Download dependency reports
      uses: actions/download-artifact@v4
      with:
        name: dependency-reports
        
    - name: Update requirements files
      run: |
        case "${{ matrix.update-type }}" in
          "security")
            # Update only packages with security vulnerabilities
            if [ -s safety.json ]; then
              jq -r '.[].package' safety.json | while read package; do
                pur -r requirements.txt --only "$package" --force
              done
            fi
            ;;
          "patch")
            # Update patch versions only
            pur -r requirements.txt --patch
            ;;
          "minor")
            # Update minor versions
            pur -r requirements.txt --minor
            ;;
        esac
        
    - name: Install updated dependencies
      run: |
        pip install -r requirements.txt
        pip install -e ".[dev,test]"
        
    - name: Run tests
      run: |
        pytest tests/ --maxfail=5 --tb=short
        
    - name: Run security checks
      run: |
        safety check
        bandit -r pipeline/ core/ --severity-level medium
        
    - name: Generate dependency diff
      run: |
        git add requirements.txt
        git diff --cached requirements.txt > dependency-diff.txt || true
        
    - name: Create Pull Request
      if: success()
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          deps: update ${{ matrix.update-type }} dependencies
          
          Automated dependency update for ${{ matrix.update-type }} versions.
          
          ü§ñ Generated by GitHub Actions
        title: "üîÑ Automated ${{ matrix.update-type }} dependency updates"
        body: |
          ## Automated Dependency Updates
          
          This PR contains automated ${{ matrix.update-type }} dependency updates.
          
          ### Update Type: `${{ matrix.update-type }}`
          
          ### Changes
          - Updated dependencies based on security advisories and version constraints
          - All tests are passing
          - Security checks have been run
          
          ### Verification
          - [x] Tests pass
          - [x] Security scan clean
          - [x] No breaking changes detected
          
          ### Review Checklist
          - [ ] Review dependency changes
          - [ ] Verify no breaking changes
          - [ ] Check for any new vulnerabilities
          - [ ] Confirm tests cover updated functionality
          
          **Note:** This PR was automatically generated. Please review carefully before merging.
          
          ---
          ü§ñ Generated by GitHub Actions on ${{ github.sha }}
        branch: automated/deps-${{ matrix.update-type }}-${{ github.run_number }}
        labels: |
          dependencies
          ${{ matrix.update-type }}
          automated
        reviewers: |
          terragon-labs/engineering-team
        assignees: |
          terragon-labs/security-team
        draft: false
        
  security-updates:
    name: Critical Security Updates
    runs-on: ubuntu-latest
    needs: check-dependencies
    if: needs.check-dependencies.outputs.security-updates == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Download dependency reports
      uses: actions/download-artifact@v4
      with:
        name: dependency-reports
        
    - name: Apply security updates
      run: |
        # Get vulnerable packages and update them
        if [ -s safety.json ] && [ "$(jq length safety.json)" -gt 0 ]; then
          echo "Applying security updates..."
          jq -r '.[].package' safety.json | while read package; do
            echo "Updating vulnerable package: $package"
            pip install --upgrade "$package"
          done
          
          # Update requirements.txt with new versions
          pip freeze > requirements.txt.new
          mv requirements.txt.new requirements.txt
        fi
        
    - name: Verify security fixes
      run: |
        safety check --json --output safety-after.json || true
        REMAINING_VULNS=$(jq length safety-after.json)
        
        if [ "$REMAINING_VULNS" -gt 0 ]; then
          echo "‚ö†Ô∏è Some vulnerabilities remain after update"
          jq -r '.[] | "- \(.package): \(.vulnerability)"' safety-after.json
        else
          echo "‚úÖ All security vulnerabilities resolved"
        fi
        
    - name: Run tests
      run: |
        pip install -e ".[dev,test]"
        pytest tests/ --maxfail=3 --tb=short
        
    - name: Create Security Update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          security: update vulnerable dependencies
          
          Critical security updates for vulnerable packages.
          
          üö® SECURITY UPDATE - Immediate review required
        title: "üö® SECURITY: Critical dependency updates"
        body: |
          ## üö® Critical Security Updates
          
          This PR contains **critical security updates** for vulnerable dependencies.
          
          ### Security Issues Addressed
          ```json
          $(cat safety.json | jq -r '.[] | "- **\(.package)** (\(.installed_version) ‚Üí latest): \(.vulnerability)"')
          ```
          
          ### Verification
          - [x] Security vulnerabilities patched
          - [x] Tests pass
          - [x] Dependencies updated
          
          ### ‚ö†Ô∏è IMPORTANT
          This PR addresses **security vulnerabilities** and should be reviewed and merged as soon as possible.
          
          ### Next Steps
          1. **Immediate Review** - Security team review required
          2. **Merge ASAP** - Do not delay security updates
          3. **Deploy** - Schedule immediate deployment
          4. **Monitor** - Watch for any issues post-deployment
          
          ---
          üö® **SECURITY UPDATE** - Generated automatically on ${{ github.sha }}
        branch: security/critical-deps-${{ github.run_number }}
        labels: |
          security
          critical
          dependencies
          urgent
        reviewers: |
          terragon-labs/security-team
        assignees: |
          terragon-labs/security-team
        draft: false
        
    - name: Notify Security Team
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "channel": "#security-alerts",
            "username": "SecurityBot",
            "icon_emoji": ":warning:",
            "attachments": [{
              "color": "danger",
              "fallback": "Critical security updates available",
              "title": "üö® Critical Security Updates",
              "text": "Automated security updates have been created for vulnerable dependencies.",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Pull Request",
                  "value": "security/critical-deps-${{ github.run_number }}",
                  "short": true
                }
              ],
              "actions": [{
                "type": "button",
                "text": "Review PR",
                "url": "https://github.com/${{ github.repository }}/pulls"
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies and audit tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit cyclonedx-bom
        
    - name: Generate SBOM
      run: |
        cyclonedx-py -o sbom.json
        
    - name: Comprehensive Audit
      run: |
        # Safety check
        safety check --json --output safety-audit.json || true
        
        # pip-audit check
        pip-audit --format=json --output pip-audit.json || true
        
        # License check
        pip-licenses --format=json --output licenses.json
        
    - name: Generate Audit Report
      run: |
        python scripts/generate-dependency-audit.py \
          --safety safety-audit.json \
          --pip-audit pip-audit.json \
          --licenses licenses.json \
          --sbom sbom.json \
          --output dependency-audit-report.md
          
    - name: Upload Audit Results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit
        path: |
          sbom.json
          safety-audit.json
          pip-audit.json
          licenses.json
          dependency-audit-report.md