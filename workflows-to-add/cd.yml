name: 🚀 Continuous Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ========== BUILD & PUBLISH ==========
  build-and-publish:
    name: 🏗️ Build & Publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Build Python package
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - name: 📋 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/

  # ========== SECURITY SCAN ==========
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-publish.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ========== STAGING DEPLOYMENT ==========
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-publish, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.agentic-startup-studio.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Configure deployment
        run: |
          echo "Deploying version ${{ needs.build-and-publish.outputs.version }} to staging"
          echo "IMAGE_TAG=${{ needs.build-and-publish.outputs.version }}" >> $GITHUB_ENV

      - name: 🚀 Deploy to staging
        run: |
          # Example deployment commands (customize for your infrastructure)
          echo "🚀 Deploying to staging environment..."
          
          # Option 1: Docker Compose deployment
          # export IMAGE_TAG=${{ env.IMAGE_TAG }}
          # docker-compose -f docker-compose.staging.yml up -d
          
          # Option 2: Kubernetes deployment
          # kubectl set image deployment/agentic-startup-studio app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          # kubectl rollout status deployment/agentic-startup-studio
          
          # Option 3: Cloud Run deployment
          # gcloud run deploy agentic-startup-studio --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --region us-central1
          
          echo "✅ Staging deployment complete!"

      - name: 🧪 Run smoke tests
        run: |
          echo "🧪 Running smoke tests against staging..."
          # Add your smoke test commands here
          # curl -f https://staging.agentic-startup-studio.com/health || exit 1
          # python scripts/smoke_test.py --environment staging
          echo "✅ Smoke tests passed!"

      - name: 📊 Update deployment status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ Staging deployment successful"
            echo "deployment-status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Staging deployment failed"
            echo "deployment-status=failure" >> $GITHUB_OUTPUT
          fi

  # ========== PRODUCTION DEPLOYMENT ==========
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-publish, security-scan, deploy-staging]
    if: (startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    environment:
      name: production
      url: https://agentic-startup-studio.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Configure production deployment
        run: |
          echo "Deploying version ${{ needs.build-and-publish.outputs.version }} to production"
          echo "IMAGE_TAG=${{ needs.build-and-publish.outputs.version }}" >> $GITHUB_ENV

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          
          # Blue-Green deployment strategy
          echo "📘 Deploying to blue environment..."
          # kubectl apply -f k8s/blue-deployment.yaml
          # kubectl set image deployment/agentic-startup-studio-blue app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          
          echo "🧪 Running production readiness checks..."
          # Add production readiness checks here
          
          echo "🔄 Switching traffic to blue environment..."
          # kubectl patch service agentic-startup-studio -p '{"spec":{"selector":{"version":"blue"}}}'
          
          echo "♻️ Cleaning up green environment..."
          # kubectl delete deployment agentic-startup-studio-green
          
          echo "✅ Production deployment complete!"

      - name: 🧪 Run production smoke tests
        run: |
          echo "🧪 Running production smoke tests..."
          # curl -f https://agentic-startup-studio.com/health || exit 1
          # python scripts/smoke_test.py --environment production
          echo "✅ Production smoke tests passed!"

      - name: 📊 Update metrics
        run: |
          echo "📊 Updating deployment metrics..."
          # Update deployment metrics in monitoring system
          # curl -X POST "https://metrics.company.com/deployments" -d '{"service":"agentic-startup-studio","version":"${{ env.IMAGE_TAG }}","status":"success"}'

  # ========== RELEASE MANAGEMENT ==========
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [build-and-publish, deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Generate changelog
        id: changelog
        run: |
          # Generate changelog since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📋 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/

      - name: 🏷️ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            
            ### 📊 Deployment Information
            - **Docker Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-publish.outputs.version }}`
            - **Deployment Time**: ${{ github.event.head_commit.timestamp }}
            - **Commit**: ${{ github.sha }}
            
            ### 📝 Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🔗 Links
            - [Production Environment](https://agentic-startup-studio.com)
            - [Documentation](https://docs.agentic-startup-studio.com)
            - [Monitoring Dashboard](https://grafana.agentic-startup-studio.com)
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

      - name: 📦 Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: dist-packages.zip
          asset_content_type: application/zip

  # ========== PUBLISH TO PYPI ==========
  publish-pypi:
    name: 📦 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-and-publish, deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/project/agentic-startup-studio
    steps:
      - name: 📋 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/

      - name: 📦 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  # ========== ROLLBACK CAPABILITY ==========
  prepare-rollback:
    name: 🔄 Prepare Rollback
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [build-and-publish, deploy-staging, deploy-production]
    steps:
      - name: 🔄 Prepare rollback information
        run: |
          echo "🔄 Deployment failed. Preparing rollback information..."
          
          # Get previous stable version
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "latest")
          echo "Previous stable version: $PREVIOUS_TAG"
          
          # Create rollback script
          cat > rollback.sh << EOF
          #!/bin/bash
          echo "🔄 Rolling back to previous version: $PREVIOUS_TAG"
          
          # Rollback commands (customize for your infrastructure)
          # kubectl set image deployment/agentic-startup-studio app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PREVIOUS_TAG
          # kubectl rollout status deployment/agentic-startup-studio
          
          echo "✅ Rollback complete!"
          EOF
          
          chmod +x rollback.sh
          
          echo "🔄 Rollback script prepared. Execute manually if needed."

  # ========== NOTIFICATION ==========
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 📢 Send notification
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Production deployment successful!"
            # Send success notification (Slack, Discord, etc.)
            # curl -X POST -H 'Content-type: application/json' --data '{"text":"🚀 Agentic Startup Studio deployed successfully to production!"}' ${{ secrets.SLACK_WEBHOOK }}
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful!"
            # Send staging notification
          else
            echo "❌ Deployment failed!"
            # Send failure notification
            # curl -X POST -H 'Content-type: application/json' --data '{"text":"❌ Agentic Startup Studio deployment failed!"}' ${{ secrets.SLACK_WEBHOOK }}
          fi