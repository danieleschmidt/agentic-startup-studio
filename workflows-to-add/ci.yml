name: 🔄 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ========== CODE QUALITY ==========
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 🎨 Check code formatting (Black)
        run: black --check --diff .

      - name: 📋 Check import sorting (isort)
        run: isort --check-only --diff .

      - name: 🔍 Lint code (Ruff)
        run: ruff check --output-format=github .

      - name: 🔍 Type checking (MyPy)
        run: mypy --show-error-codes --no-error-summary .

  # ========== SECURITY SCANNING ==========
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 🔒 Security scan (Bandit)
        run: |
          bandit -r pipeline/ core/ scripts/ -f json -o bandit-report.json
          bandit -r pipeline/ core/ scripts/ --severity-level medium

      - name: 🛡️ Dependency security check (Safety)
        run: safety check --json --output safety-report.json

      - name: 🔐 Check for secrets
        run: |
          python scripts/validate_production_secrets.py --scan-hardcoded --strict

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # ========== TESTING ==========
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: studio_test
          POSTGRES_USER: studio
          POSTGRES_PASSWORD: studio
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgresql://studio:studio@localhost:5432/studio_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: testing
        run: |
          pytest tests/ \
            --cov=pipeline \
            --cov=core \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=90 \
            --maxfail=3 \
            --tb=short \
            -v

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📋 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  # ========== INTEGRATION TESTS ==========
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: studio_test
          POSTGRES_USER: studio
          POSTGRES_PASSWORD: studio
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: 🔗 Run integration tests
        env:
          DATABASE_URL: postgresql://studio:studio@localhost:5432/studio_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: testing
        run: |
          pytest tests/integration/ \
            -m integration \
            --maxfail=1 \
            --timeout=300 \
            -v

  # ========== DOCKER BUILD ==========
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: agentic-startup-studio:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        run: |
          docker run --rm agentic-startup-studio:${{ github.sha }} python -c "import pipeline; print('✅ Package imports successfully')"

  # ========== DEPENDENCY CHECK ==========
  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 🔍 Check for dependency conflicts
        run: pip check

      - name: 🔍 Check for outdated dependencies
        run: pip list --outdated

      - name: 📊 Generate dependency tree
        run: |
          pip install pipdeptree
          pipdeptree --json > dependency-tree.json

      - name: 📋 Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: dependency-tree.json

  # ========== BUILD VALIDATION ==========
  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 🏗️ Build package
        run: python -m build

      - name: 🔍 Check package
        run: twine check dist/*

      - name: 📋 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  # ========== PERFORMANCE TESTS ==========
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: studio_test
          POSTGRES_USER: studio
          POSTGRES_PASSWORD: studio
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: ⚡ Run performance benchmarks
        env:
          DATABASE_URL: postgresql://studio:studio@localhost:5432/studio_test
        run: |
          python scripts/performance_benchmark.py --output performance-results.json

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # ========== CONSOLIDATION ==========
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - security
      - test
      - integration-tests
      - docker-build
      - dependency-check
      - build-validation
    if: always()
    steps:
      - name: ✅ Mark CI as successful
        if: ${{ needs.code-quality.result == 'success' && needs.security.result == 'success' && needs.test.result == 'success' && needs.integration-tests.result == 'success' && needs.docker-build.result == 'success' && needs.dependency-check.result == 'success' && needs.build-validation.result == 'success' }}
        run: echo "✅ All CI checks passed successfully!"

      - name: ❌ Mark CI as failed
        if: ${{ needs.code-quality.result == 'failure' || needs.security.result == 'failure' || needs.test.result == 'failure' || needs.integration-tests.result == 'failure' || needs.docker-build.result == 'failure' || needs.dependency-check.result == 'failure' || needs.build-validation.result == 'failure' }}
        run: |
          echo "❌ CI checks failed!"
          exit 1