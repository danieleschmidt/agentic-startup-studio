import os
import logging
from typing import List, Optional
from uuid import UUID

from sqlmodel import create_engine, Session, SQLModel, select
from sqlalchemy.exc import SQLAlchemyError, IntegrityError, OperationalError
from sqlalchemy import Engine

# Assuming models.py is in the same directory
from .models import Idea, IdeaCreate, IdeaUpdate

# Configure logging
logger = logging.getLogger(__name__)

# Custom exceptions for better error handling
class DatabaseConnectionError(Exception):
    """Raised when database connection fails"""
    pass

class IdeaNotFoundError(Exception):
    """Raised when an idea is not found in the database"""
    pass

class IdeaValidationError(Exception):
    """Raised when idea data validation fails"""
    pass

# --- Database Setup ---

DATABASE_URL_ENV_VAR = "DATABASE_URL"
# Replace with your actual default, consider a more generic placeholder for public repo
DEFAULT_DATABASE_URL = "postgresql://user:password@localhost:5432/appdb"

# Get DB URL from environment variable or use default
DATABASE_URL = os.getenv(DATABASE_URL_ENV_VAR, DEFAULT_DATABASE_URL)

# The `echo=True` flag is useful for debugging, as it will print all SQL statements.
# For production, you'll likely want to remove it or make it configurable.
engine = create_engine(DATABASE_URL, echo=True)


def create_db_and_tables() -> bool:
    """
    Creates the database and all tables defined by SQLModel metadata.
    This function should be called once when the application starts.
    
    Returns:
        bool: True if successful, False otherwise
    
    Raises:
        DatabaseConnectionError: If database connection fails
    """
    try:
        # SQLModel.metadata.create_all() is the function that creates tables.
        # It takes the engine as an argument.
        SQLModel.metadata.create_all(engine)
        logger.info("Database and tables created successfully (if they didn't exist)")
        return True
    except OperationalError as e:
        logger.error(f"Database connection failed: {e}")
        raise DatabaseConnectionError(f"Could not connect to database: {e}") from e
    except SQLAlchemyError as e:
        logger.error(f"Database table creation failed: {e}")
        raise DatabaseConnectionError(f"Could not create tables: {e}") from e
    except Exception as e:
        logger.error(f"Unexpected error during database setup: {e}")
        raise DatabaseConnectionError(f"Unexpected database error: {e}") from e


# --- CRUD Operations for Ideas ---


def add_idea(idea_create: IdeaCreate) -> Idea:
    """
    Adds a new Idea to the database.
    
    Args:
        idea_create: Pydantic model with idea data
    
    Returns:
        Idea: Created idea with database-generated ID
    
    Raises:
        IdeaValidationError: If idea data is invalid
        DatabaseConnectionError: If database operation fails
    """
    try:
        # Convert the IdeaCreate Pydantic model to an Idea SQLModel table model instance.
        # Fields in IdeaCreate map to Idea. `id` is generated by default_factory.
        db_idea = Idea.model_validate(idea_create)
    except Exception as e:
        logger.error(f"Idea validation failed: {e}")
        raise IdeaValidationError(f"Invalid idea data: {e}") from e

    try:
        with Session(engine) as session:
            session.add(db_idea)
            session.commit()
            # Refresh to get DB-generated values like ID
            session.refresh(db_idea)
            logger.info(f"Successfully added idea with ID: {db_idea.id}")
            return db_idea
    except IntegrityError as e:
        logger.error(f"Database integrity constraint violation: {e}")
        raise IdeaValidationError(f"Idea data violates database constraints: {e}") from e
    except OperationalError as e:
        logger.error(f"Database connection error during idea creation: {e}")
        raise DatabaseConnectionError(f"Database connection failed: {e}") from e
    except SQLAlchemyError as e:
        logger.error(f"Database error during idea creation: {e}")
        raise DatabaseConnectionError(f"Database operation failed: {e}") from e
    except Exception as e:
        logger.error(f"Unexpected error during idea creation: {e}")
        raise DatabaseConnectionError(f"Unexpected error: {e}") from e


def get_idea_by_id(idea_id: UUID) -> Optional[Idea]:
    """
    Retrieves an Idea from the database by its ID.
    
    Args:
        idea_id: UUID of the idea to retrieve
    
    Returns:
        Optional[Idea]: The idea object or None if not found
    
    Raises:
        DatabaseConnectionError: If database operation fails
    """
    if not idea_id:
        logger.warning("get_idea_by_id called with empty/None idea_id")
        return None
    
    try:
        with Session(engine) as session:
            # Session.get() is efficient for fetching by primary key
            idea = session.get(Idea, idea_id)
            if idea:
                logger.debug(f"Successfully retrieved idea with ID: {idea_id}")
            else:
                logger.debug(f"No idea found with ID: {idea_id}")
            return idea
    except OperationalError as e:
        logger.error(f"Database connection error during idea retrieval: {e}")
        raise DatabaseConnectionError(f"Database connection failed: {e}") from e
    except SQLAlchemyError as e:
        logger.error(f"Database error during idea retrieval: {e}")
        raise DatabaseConnectionError(f"Database operation failed: {e}") from e
    except Exception as e:
        logger.error(f"Unexpected error during idea retrieval: {e}")
        raise DatabaseConnectionError(f"Unexpected error: {e}") from e


def list_ideas(skip: int = 0, limit: int = 100) -> List[Idea]:
    """
    Retrieves a list of Ideas from the database with pagination.
    
    Args:
        skip: Number of records to skip (default: 0)
        limit: Maximum number of records to return (default: 100)
    
    Returns:
        List[Idea]: List of idea objects
    
    Raises:
        DatabaseConnectionError: If database operation fails
        ValueError: If skip or limit parameters are invalid
    """
    # Validate pagination parameters
    if skip < 0:
        raise ValueError("Skip parameter must be non-negative")
    if limit <= 0 or limit > 1000:  # Reasonable upper limit
        raise ValueError("Limit parameter must be between 1 and 1000")
    
    try:
        with Session(engine) as session:
            statement = select(Idea).offset(skip).limit(limit)
            results = session.exec(statement)
            ideas = results.all()
            idea_list = list(ideas)  # Convert RerusableSequence to list
            logger.debug(f"Successfully retrieved {len(idea_list)} ideas (skip={skip}, limit={limit})")
            return idea_list
    except OperationalError as e:
        logger.error(f"Database connection error during idea listing: {e}")
        raise DatabaseConnectionError(f"Database connection failed: {e}") from e
    except SQLAlchemyError as e:
        logger.error(f"Database error during idea listing: {e}")
        raise DatabaseConnectionError(f"Database operation failed: {e}") from e
    except Exception as e:
        logger.error(f"Unexpected error during idea listing: {e}")
        raise DatabaseConnectionError(f"Unexpected error: {e}") from e


def update_idea(idea_id: UUID, idea_update: IdeaUpdate) -> Optional[Idea]:
    """
    Updates an existing Idea in the database.
    Only fields present in idea_update are modified.
    
    Args:
        idea_id: UUID of the idea to update
        idea_update: Pydantic model with updated fields
    
    Returns:
        Optional[Idea]: Updated idea object or None if not found
    
    Raises:
        IdeaNotFoundError: If idea with given ID doesn't exist
        IdeaValidationError: If update data is invalid
        DatabaseConnectionError: If database operation fails
    """
    if not idea_id:
        raise ValueError("idea_id cannot be empty or None")
    
    try:
        # Get the update data as a dictionary, excluding unset fields
        update_data = idea_update.model_dump(exclude_unset=True)
        if not update_data:
            logger.warning(f"No fields to update for idea {idea_id}")
            return get_idea_by_id(idea_id)  # Return existing idea
    except Exception as e:
        logger.error(f"Failed to process update data: {e}")
        raise IdeaValidationError(f"Invalid update data: {e}") from e

    try:
        with Session(engine) as session:
            db_idea = session.get(Idea, idea_id)
            if not db_idea:
                logger.warning(f"Idea with ID {idea_id} not found for update")
                raise IdeaNotFoundError(f"Idea with ID {idea_id} not found")

            # Apply updates
            for key, value in update_data.items():
                if hasattr(db_idea, key):
                    setattr(db_idea, key, value)
                else:
                    logger.warning(f"Attempted to update non-existent field '{key}' on idea {idea_id}")

            session.add(db_idea)
            session.commit()
            session.refresh(db_idea)
            logger.info(f"Successfully updated idea with ID: {idea_id}")
            return db_idea
    except IntegrityError as e:
        logger.error(f"Database integrity constraint violation during update: {e}")
        raise IdeaValidationError(f"Update data violates database constraints: {e}") from e
    except OperationalError as e:
        logger.error(f"Database connection error during idea update: {e}")
        raise DatabaseConnectionError(f"Database connection failed: {e}") from e
    except SQLAlchemyError as e:
        logger.error(f"Database error during idea update: {e}")
        raise DatabaseConnectionError(f"Database operation failed: {e}") from e
    except Exception as e:
        logger.error(f"Unexpected error during idea update: {e}")
        raise DatabaseConnectionError(f"Unexpected error: {e}") from e


def delete_idea(idea_id: UUID) -> bool:
    """
    Deletes an Idea from the database by its ID.
    
    Args:
        idea_id: UUID of the idea to delete
    
    Returns:
        bool: True if deletion was successful, False if idea not found
    
    Raises:
        DatabaseConnectionError: If database operation fails
    """
    if not idea_id:
        logger.warning("delete_idea called with empty/None idea_id")
        return False
    
    try:
        with Session(engine) as session:
            db_idea = session.get(Idea, idea_id)
            if not db_idea:
                logger.warning(f"Idea with ID {idea_id} not found for deletion")
                return False
            
            session.delete(db_idea)
            session.commit()
            logger.info(f"Successfully deleted idea with ID: {idea_id}")
            return True
    except IntegrityError as e:
        logger.error(f"Database integrity constraint violation during deletion: {e}")
        # This could happen if the idea is referenced by other entities
        raise DatabaseConnectionError(f"Cannot delete idea due to database constraints: {e}") from e
    except OperationalError as e:
        logger.error(f"Database connection error during idea deletion: {e}")
        raise DatabaseConnectionError(f"Database connection failed: {e}") from e
    except SQLAlchemyError as e:
        logger.error(f"Database error during idea deletion: {e}")
        raise DatabaseConnectionError(f"Database operation failed: {e}") from e
    except Exception as e:
        logger.error(f"Unexpected error during idea deletion: {e}")
        raise DatabaseConnectionError(f"Unexpected error: {e}") from e


if __name__ == "__main__":
    # This is a basic demonstration.
    # For this to run, you need a PostgreSQL server running and configured
    # as per DATABASE_URL.

    print(f"Using database: {DATABASE_URL}")

    # 1. Create database and tables
    try:
        create_db_and_tables()
    except Exception as e:
        print(
            "Error creating DB/tables. Is PostgreSQL running and configured? "
            f"Error: {e}"
        )
        print("Please ensure PostgreSQL is running and the DATABASE_URL is correct.")
        print(f"Attempted URL: {DATABASE_URL}")
        exit(1)

    print("\n--- Running Ledger Examples ---")

    # 2. Add a new idea
    print("\n1. Adding new idea...")
    new_idea_data = IdeaCreate(
        arxiv="https://arxiv.org/abs/2024.11001",
        evidence=[
            "https://example.com/drone_market_report.pdf",
            "https://example.com/solar_efficiency.txt",
        ],
        status="research",
    )
    try:
        created_idea = add_idea(new_idea_data)
        print(f"Added Idea: {created_idea.arxiv} (ID: {created_idea.id})")

        # 3. Get the idea by ID
        print(f"\n2. Fetching idea by ID: {created_idea.id}")
        fetched_idea = get_idea_by_id(created_idea.id)
        if fetched_idea:
            print(f"Fetched Idea: {fetched_idea.arxiv}, Status: {fetched_idea.status}")
            print(f"Evidence: {fetched_idea.evidence}")
        else:
            print(f"Idea with ID {created_idea.id} not found after adding.")

        # 4. List ideas
        print("\n3. Listing ideas (first 5):")
        all_ideas = list_ideas(limit=5)
        if all_ideas:
            for idx, idea_item in enumerate(all_ideas):
                print(
                    f"  {idx + 1}. {idea_item.arxiv} (ID: {idea_item.id}, "
                    f"Status: {idea_item.status})"
                )
        else:
            print("No ideas found in the ledger.")

        # Add another idea for variety
        another_idea_data = IdeaCreate(
            arxiv="https://arxiv.org/abs/2024.11002",
        )
        another_idea = add_idea(another_idea_data)
        print(f"\nAdded another idea: {another_idea.arxiv} (ID: {another_idea.id})")

        # 5. Update an idea
        print(f"\n4. Updating idea: {created_idea.id}")
        update_desc = f"{created_idea.description} - Now with Series A funding."
        update_payload = IdeaUpdate(status="funded", description=update_desc)
        updated_idea = update_idea(created_idea.id, update_payload)
        if updated_idea:
            print(
                f"Updated Idea: {updated_idea.name}, "
                f"New Status: {updated_idea.status}, "
                f"New Desc: {updated_idea.description}"
            )
        else:
            print(f"Failed to update idea with ID {created_idea.id}")

        # 6. Delete an idea
        print(f"\n5. Deleting idea: {another_idea.id}")  # Delete 'another_idea'
        if delete_idea(another_idea.id):
            print(f"Idea with ID {another_idea.id} deleted successfully.")
            deleted_check = get_idea_by_id(another_idea.id)
            if deleted_check is None:
                print(f"Verified: Idea with ID {another_idea.id} no longer exists.")
            else:
                print(
                    f"Verification FAILED: Idea with ID {another_idea.id} "
                    "still exists after deletion attempt."
                )
        else:
            print(f"Failed to delete idea with ID {another_idea.id}")

        # Clean up the first idea created
        print(f"\n6. Cleaning up by deleting idea: {created_idea.id}")
        if delete_idea(created_idea.id):
            print(f"Idea with ID {created_idea.id} cleaned up successfully.")
        else:
            print(f"Failed to clean up idea with ID {created_idea.id}")

    except Exception as e:
        print(f"\nAn error occurred during ledger operations: {e}")
        print("This might be due to database connectivity or configuration.")
        print(
            "Ensure your PostgreSQL server is running and accessible via: "
            f"{DATABASE_URL}"
        )

    print("\n--- Ledger Examples Finished ---")
