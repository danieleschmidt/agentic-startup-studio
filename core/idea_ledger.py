import os
from typing import List
from uuid import UUID

from sqlmodel import create_engine, Session, SQLModel, select

# Assuming models.py is in the same directory
from .models import Idea, IdeaCreate, IdeaUpdate

# --- Database Setup ---

DATABASE_URL_ENV_VAR = "DATABASE_URL"
# Replace with your actual default, consider a more generic placeholder for public repo
DEFAULT_DATABASE_URL = "postgresql://user:password@localhost:5432/appdb"

# Get DB URL from environment variable or use default
DATABASE_URL = os.getenv(DATABASE_URL_ENV_VAR, DEFAULT_DATABASE_URL)

# The `echo=True` flag is useful for debugging, as it will print all SQL statements.
# For production, you'll likely want to remove it or make it configurable.
engine = create_engine(DATABASE_URL, echo=True)


def create_db_and_tables():
    """
    Creates the database and all tables defined by SQLModel metadata.
    This function should be called once when the application starts.
    """
    # SQLModel.metadata.create_all() is the function that creates tables.
    # It takes the engine as an argument.
    SQLModel.metadata.create_all(engine)
    print("Database and tables created (if they didn't exist).")


# --- CRUD Operations for Ideas ---


def add_idea(idea_create: IdeaCreate) -> Idea:
    """
    Adds a new Idea to the database.
    """
    # Convert the IdeaCreate Pydantic model to an Idea SQLModel table model instance.
    # Fields in IdeaCreate map to Idea. `id` is generated by default_factory.
    db_idea = Idea.model_validate(idea_create)

    with Session(engine) as session:
        session.add(db_idea)
        session.commit()
        # Refresh to get DB-generated values like ID
        session.refresh(db_idea)
    return db_idea


def get_idea_by_id(idea_id: UUID) -> Idea | None:
    """
    Retrieves an Idea from the database by its ID.
    Returns the Idea object or None if not found.
    """
    with Session(engine) as session:
        # Session.get() is efficient for fetching by primary key
        idea = session.get(Idea, idea_id)
        return idea


def list_ideas(skip: int = 0, limit: int = 100) -> List[Idea]:
    """
    Retrieves a list of Ideas from the database with pagination.
    """
    with Session(engine) as session:
        statement = select(Idea).offset(skip).limit(limit)
        results = session.exec(statement)
        ideas = results.all()
        return list(ideas)  # Convert RerusableSequence to list


def update_idea(idea_id: UUID, idea_update: IdeaUpdate) -> Idea | None:
    """
    Updates an existing Idea in the database.
    Only fields present in idea_update are modified.
    Returns the updated Idea object or None if the original idea was not found.
    """
    with Session(engine) as session:
        db_idea = session.get(Idea, idea_id)
        if not db_idea:
            return None

        # Get the update data as a dictionary, excluding unset fields
        update_data = idea_update.model_dump(exclude_unset=True)

        for key, value in update_data.items():
            setattr(db_idea, key, value)

        session.add(db_idea)
        session.commit()
        session.refresh(db_idea)
        return db_idea


def delete_idea(idea_id: UUID) -> bool:
    """
    Deletes an Idea from the database by its ID.
    Returns True if deletion was successful, False otherwise (e.g., idea not found).
    """
    with Session(engine) as session:
        db_idea = session.get(Idea, idea_id)
        if not db_idea:
            return False
        session.delete(db_idea)
        session.commit()
        return True


if __name__ == "__main__":
    # This is a basic demonstration.
    # For this to run, you need a PostgreSQL server running and configured
    # as per DATABASE_URL.

    print(f"Using database: {DATABASE_URL}")

    # 1. Create database and tables
    try:
        create_db_and_tables()
    except Exception as e:
        print(
            "Error creating DB/tables. Is PostgreSQL running and configured? "
            f"Error: {e}"
        )
        print("Please ensure PostgreSQL is running and the DATABASE_URL is correct.")
        print(f"Attempted URL: {DATABASE_URL}")
        exit(1)

    print("\n--- Running Ledger Examples ---")

    # 2. Add a new idea
    print("\n1. Adding new idea...")
    new_idea_data = IdeaCreate(
        arxiv="https://arxiv.org/abs/2024.11001",
        evidence=[
            "https://example.com/drone_market_report.pdf",
            "https://example.com/solar_efficiency.txt",
        ],
        status="research",
    )
    try:
        created_idea = add_idea(new_idea_data)
        print(f"Added Idea: {created_idea.arxiv} (ID: {created_idea.id})")

        # 3. Get the idea by ID
        print(f"\n2. Fetching idea by ID: {created_idea.id}")
        fetched_idea = get_idea_by_id(created_idea.id)
        if fetched_idea:
            print(f"Fetched Idea: {fetched_idea.arxiv}, Status: {fetched_idea.status}")
            print(f"Evidence: {fetched_idea.evidence}")
        else:
            print(f"Idea with ID {created_idea.id} not found after adding.")

        # 4. List ideas
        print("\n3. Listing ideas (first 5):")
        all_ideas = list_ideas(limit=5)
        if all_ideas:
            for idx, idea_item in enumerate(all_ideas):
                print(
                    f"  {idx + 1}. {idea_item.arxiv} (ID: {idea_item.id}, "
                    f"Status: {idea_item.status})"
                )
        else:
            print("No ideas found in the ledger.")

        # Add another idea for variety
        another_idea_data = IdeaCreate(
            arxiv="https://arxiv.org/abs/2024.11002",
        )
        another_idea = add_idea(another_idea_data)
        print(f"\nAdded another idea: {another_idea.arxiv} (ID: {another_idea.id})")

        # 5. Update an idea
        print(f"\n4. Updating idea: {created_idea.id}")
        update_desc = f"{created_idea.description} - Now with Series A funding."
        update_payload = IdeaUpdate(status="funded", description=update_desc)
        updated_idea = update_idea(created_idea.id, update_payload)
        if updated_idea:
            print(
                f"Updated Idea: {updated_idea.name}, "
                f"New Status: {updated_idea.status}, "
                f"New Desc: {updated_idea.description}"
            )
        else:
            print(f"Failed to update idea with ID {created_idea.id}")

        # 6. Delete an idea
        print(f"\n5. Deleting idea: {another_idea.id}")  # Delete 'another_idea'
        if delete_idea(another_idea.id):
            print(f"Idea with ID {another_idea.id} deleted successfully.")
            deleted_check = get_idea_by_id(another_idea.id)
            if deleted_check is None:
                print(f"Verified: Idea with ID {another_idea.id} no longer exists.")
            else:
                print(
                    f"Verification FAILED: Idea with ID {another_idea.id} "
                    "still exists after deletion attempt."
                )
        else:
            print(f"Failed to delete idea with ID {another_idea.id}")

        # Clean up the first idea created
        print(f"\n6. Cleaning up by deleting idea: {created_idea.id}")
        if delete_idea(created_idea.id):
            print(f"Idea with ID {created_idea.id} cleaned up successfully.")
        else:
            print(f"Failed to clean up idea with ID {created_idea.id}")

    except Exception as e:
        print(f"\nAn error occurred during ledger operations: {e}")
        print("This might be due to database connectivity or configuration.")
        print(
            "Ensure your PostgreSQL server is running and accessible via: "
            f"{DATABASE_URL}"
        )

    print("\n--- Ledger Examples Finished ---")
